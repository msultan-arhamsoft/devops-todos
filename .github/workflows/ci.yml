name: CI

# Use Case: For development the long lived branch is develop branch, so everyone Developer will be creating the pull request with destination as develop branch, so we need to have the continuous integration for develop branch.
on:
  pull_request:
    branches: [ develop ]

jobs:
  #Job # 1, to build the node js app.
  Build_Node_App:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    strategy:
      matrix:
        node-version: [14.x]        
    steps:
      - uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          npm install
          npm ci
  # Job # 2, to build the image and push to registry. Job # 2 depends on Job # 1
  Push_Image_To_Docker_Hub:
      runs-on: ubuntu-latest
      
      #If for any reason there is no need to run the CI, can be skipped by adding skip ci key words in the commit message.
      if: "!contains(github.event.head_commit.message, 'skip ci')"
      name: Build Image and Push to registry
      env:
        REGISTRY: docker.io
      #Job # 2 depends on Job # 1
      needs: [Build_Node_App]
      steps:
        - name: checkout repo
          uses: actions/checkout@v2
        
        #Inform about CI initialization by adding the Comment on Pull Request
        - name: Initialize Pipeline - COMMENT ON PR
          uses: mshick/add-pr-comment@v1
          env:
            GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN_GITHUB }}
          with:
            message: "@${{ github.actor }} GitHub Actions has started building this code."
            allow-repeats: false

        # Generate variables to be used for creating and pushing the Images to the Registry
        - name: Generate Variables to be used for DOCKER IMAGES
          id: generate_vars
          run: |
            # Just Tag
            IMAGE_TAG=phase2-$(echo ${{ github.event.head_commit.id }} | cut -c1-8)
            # Just Image name
            IMAGE_NAME=${{ secrets.DOCKERHUB_REPO }}
            #Image ID= Name + Tag
            IMAGE_ID=$IMAGE_NAME:$IMAGE_TAG
            IMAGE_REPO=$REGISTRY/$IMAGE_ID
            echo "Image: $IMAGE_REPO"
            echo "::set-output name=image::$IMAGE_REPO"
            echo "::set-output name=image_name::$IMAGE_NAME"
            echo REPO=$IMAGE_NAME >> $GITHUB_ENV
            echo IMAGE=$(echo "$REGISTRY/$IMAGE_ID") >> $GITHUB_ENV

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v1

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        #Print variables, just to check if the variables are created correctly.
        - name: Echo Output
          run: |
            echo "Image from Output: ${{ steps.generate_vars.outputs.image }}"
            echo "Repo from Output: ${{ steps.generate_vars.outputs.image_name }}"
            echo "Image from Env:  ${{ env.IMAGE }}"
            echo "Repo from Env:  ${{ env.REPO }}"
        
        #Build the image using the Dockerfile, and push to registry.
        - name: Build and push
          uses: docker/build-push-action@v2
          with:
            context: ./
            file: ./Dockerfile
            pull: true
            push: true
            tags: ${{ env.IMAGE }}

        #Comment on Pull Request, once the build process is completed
        - name: Comment on PR - Once completed successfully.
          uses: mshick/add-pr-comment@v1
          env:
            GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN_GITHUB }}
          with:
            message: '@${{ github.actor }} Image is available for testing. `docker pull ${{ env.IMAGE }}`'
            allow-repeats: false

        # Comment on Pull Request, in case there is some failure while building or pushing the image.
        - name: Notify Failure
          if: failure()
          uses: mshick/add-pr-comment@v1
          env:
            GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN_GITHUB }}
          with:
            message: '@${{ github.actor }} The pipeline failed!'
            allow-repeats: false

        # Send Notification/Message on slack for the failed or suceeded CI Pipeline.
        - name: Notify Slack
          uses: 8398a7/action-slack@v3
          if: always()
          with:
            status: ${{ job.status }}
            fields: repo,author,action,eventName,ref,workflow
          env:
            GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN_GITHUB }}
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}